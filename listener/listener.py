from flask import Flask, request
import asyncio
import aiosqlite
import requests

app = Flask(__name__)

TELEGRAM_BOT_TOKEN = ""
DB_PATH = ""
STATUS_MAP = {
    "To Do": "üìù –ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é",
    "In Progress": "üöß –í —Ä–∞–±–æ—Ç–µ",
    "In Review": "üîç –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ",
    "Done": "‚úÖ –ì–æ—Ç–æ–≤–æ",
    "Blocked": "‚õî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞",
    "Reopened": "‚ôªÔ∏è –ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∞",
    "Closed": "üîí –ó–∞–∫—Ä—ã—Ç–∞",
    "Cancelled": "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞",
    "Test": "üß™ –ù–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏",
    "Ready for QA": "üì¶ –ì–æ—Ç–æ–≤–æ –∫ QA",
    "Deployed": "üöÄ –†–∞–∑–≤–µ—Ä–Ω—É—Ç–∞",
}

def send_telegram_message(message, chat_id):
    telegram_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": message
    }
    response = requests.post(telegram_url, data=payload)
    if response.status_code == 200:
        print("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
    else:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è", response.text)

async def change_status(task_key, new_status):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "UPDATE tasks SET state = ? WHERE task_key = ?",
            (new_status, task_key)
        )
        await db.commit()

async def get_chat_id_by_task_key(task_key: str, label_user_id):
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("""
            SELECT user_id FROM tasks WHERE task_key = ?
        """, (task_key,))
        row = await cursor.fetchone()
        return row[0] if row else label_user_id        

@app.route('/jira-webhook', methods=['POST'])
def jira_webhook():
    data = request.json
    print('Received event:', data)

    issue_key = data['issue']['key']
    label = data['issue']['fields'].get('labels', [None])[0]
    label_user_id = label.split(":")[1] if label and label.startswith("user_id:") else None



    async def get_and_send_message():
        chat_id = await get_chat_id_by_task_key(issue_key, label_user_id)
        message = ""

        if 'comment' in data:
            comments = data['comment']['body']
            message = f"–ö –∑–∞–¥–∞—á–µ {issue_key} –¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n {comments}"   
        elif 'changelog' in data:
            for item in data['changelog'].get('items', []):
                if item.get('field') == 'status':
                    from_status = item.get('fromString', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    readable_from_status = STATUS_MAP.get(from_status, "üìÑ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
                    to_status = item.get('toString', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    readable_to_status = STATUS_MAP.get(to_status, "üìÑ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
                    message = f"–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ {issue_key} –∏–∑–º–µ–Ω–∏–ª—Å—è: {readable_from_status} ‚Üí {readable_to_status}"
                    await change_status(issue_key, readable_to_status)
                    break

        send_telegram_message(message, chat_id)
    
    asyncio.run(get_and_send_message())

    return "OK", 200

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=3000)
